import chisel3.experimental.ChiselEnum
import chisel3.util.BitPat

object Instruction extends ChiselEnum {
  val ERR_INST,
  // RV32I
  ADD, ADDI, SUB, LUI, AUIPC,                  // Arithmetic
  SLL, SLLI, SRL, SRLI, SRA, SRAI,             // Shifts
  XOR, XORI, OR, ORI, AND, ANDI,               // Logical
  SLT, SLTI, SLTU, SLTIU,                      // Compare
  BEQ, BNE, BLT, BGE, BLTU, BGEU,              // Branches
  JAL, JALR,                                   // Jump & Link
  FENCE, FENCEI,                               // Sync
  ECALL, EBREAK,                               // Environment
  CSRRW, CSRRS, CSRRC, CSRRWI, CSRRSI, CSRRCI, // CSR
  LB, LH, LBU, LHU, LW,                        // Loads
  SB, SH, SW                                   // Stores
  = Value
}

object InstructionType extends ChiselEnum {
  val IN_ERR, INST_R, INST_I, INST_S, INST_B, INST_U, INST_J, INST_Z = Value
}

object InstructionPattern {
  // Arithmetic
  def ADD_PAT   = BitPat("b0000000??????????000?????0110011") // R
  def ADDI_PAT  = BitPat("b?????????????????000?????0010011") // I
  def SUB_PAT   = BitPat("b0100000??????????000?????0110011") // R
  def LUI_PAT   = BitPat("b?????????????????????????0110111") // U
  def AUIPC_PAT = BitPat("b?????????????????????????0010111") // U

  // Shifts
  def SLL_PAT  = BitPat("b0000000??????????001?????0110011") // R
  def SLLI_PAT = BitPat("b0000000??????????001?????0010011") // I
  def SRL_PAT  = BitPat("b0100000??????????101?????0110011") // R
  def SRLI_PAT = BitPat("b0000000??????????101?????0010011") // I
  def SRA_PAT  = BitPat("b0100000??????????101?????0110011") // R
  def SRAI_PAT = BitPat("b0100000??????????101?????0010011") // I

  // Logical
  def XOR_PAT  = BitPat("b0000000??????????100?????0110011") // R
  def XORI_PAT = BitPat("b?????????????????100?????0010011") // I
  def OR_PAT   = BitPat("b0000000??????????110?????0110011") // R
  def ORI_PAT  = BitPat("b?????????????????110?????0010011") // I
  def AND_PAT  = BitPat("b0000000??????????111?????0110011") // R
  def ANDI_PAT = BitPat("b?????????????????111?????0010011") // I

  // Compare
  def SLT_PAT   = BitPat("b0000000??????????010?????0110011") // R
  def SLTI_PAT  = BitPat("b?????????????????010?????0010011") // I
  def SLTU_PAT  = BitPat("b0000000??????????011?????0110011") // R
  def SLTIU_PAT = BitPat("b?????????????????011?????0010011") // I

  // Branches
  def BEQ_PAT  = BitPat("b?????????????????000?????1100011") // B
  def BNE_PAT  = BitPat("b?????????????????001?????1100011") // B
  def BLT_PAT  = BitPat("b?????????????????100?????1100011") // B
  def BGE_PAT  = BitPat("b?????????????????101?????1100011") // B
  def BLTU_PAT = BitPat("b?????????????????110?????1100011") // B
  def BGEU_PAT = BitPat("b?????????????????111?????1100011") // B

  // Jump & link
  def JAL_PAT  = BitPat("b?????????????????????????1101111") // J
  def JALR_PAT = BitPat("b?????????????????000?????1101111") // I

  // Sync
  def FENCE_PAT  = BitPat("b0000????????00000000000000001111") // I
  def FENCEI_PAT = BitPat("b00000000000000000000001000001111") // I

  // Environment
  def ECALL_PAT  = BitPat("b00000000000000000000000001110011") // I
  def EBREAK_PAT = BitPat("b00000000000100000000000001110011") // I

  // CSR
  def CSRRW_PAT  = BitPat("b?????????????????001?????1110011") // I
  def CSRRS_PAT  = BitPat("b?????????????????010?????1110011") // I
  def CSRRC_PAT  = BitPat("b?????????????????011?????1110011") // I
  def CSRRWI_PAT = BitPat("b?????????????????101?????1110011") // I
  def CSRRSI_PAT = BitPat("b?????????????????110?????1110011") // I
  def CSRRCI_PAT = BitPat("b?????????????????111?????1110011") // I

  // Loads
  def LB_PAT  = BitPat("b?????????????????000?????0000011") // I
  def LH_PAT  = BitPat("b?????????????????001?????0000011") // I
  def LBU_PAT = BitPat("b?????????????????100?????0000011") // I
  def LHU_PAT = BitPat("b?????????????????101?????0000011") // I
  def LW_PAT  = BitPat("b?????????????????010?????0000011") // I

  // Stores
  def SB_PAT = BitPat("b?????????????????000?????0100011") // S
  def SH_PAT = BitPat("b?????????????????001?????0100011") // S
  def SW_PAT = BitPat("b?????????????????010?????0100011") // S

}
